@page "/"
@using System.Text.RegularExpressions;

<PageTitle>Home</PageTitle>

<MudTextField T="string" Label="Text Box" Variant="Variant.Text" Immediate="true" ValueChanged="@((args) => UpdateText(args))" AutoGrow MaxLines="10" />
<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@Disabled">Submit</MudButton><br>
Word Count: @WordCount <br>
Sentence Count: @SentenceCount <br>
Paragraph Count: @ParagraphCount <br>
<br>
Show: @SwitchChartText()<MudSwitch @bind-Value="BarOrLineCharts"></MudSwitch>
<br>

@*refactor the letters in words charts below before moving on*@

@if (BarOrLineCharts)
{
    //this is all a component 
    <MudPaper Width=1000px Height=650px Class="doc-section-component-container">
        <br><br>
        <MudText Typo="Typo.h4" Align="Align.Center">Letters In Words</MudText>
        <MudText Typo="Typo.subtitle2" Align="Align.Center">X = Words (in order), Y = Word Length in Letters</MudText>
        @*HAVE A LINE FOR EACH SENTENCE*@
        <MudChart ChartType="ChartType.Line" ChartSeries="@LettersInWordsLineSeries"  Width="100%" Height="350px" ChartOptions="LettersInWordsLineChartOptions" XAxisLabels="@LettersInWordsLineXAxisLabels" CanHideSeries/>
    </MudPaper><br>
}
else
{
    //this is all a component too
    <MudPaper Width=1000px Height=650px Class="doc-section-component-container">
        <br><br>
        <MudText Typo="Typo.h4" Align="Align.Center">Letters In Words</MudText>
        <MudText Typo="Typo.subtitle2" Align="Align.Center">X = Word Length in Letters, Y = Frequency</MudText>
        <MudChart ChartType="ChartType.Bar" ChartSeries="@LettersInWordsBarSeries" @bind-SelectedIndex="LettersInWordsIndex" XAxisLabels="@LettersInWordsBarXAxisLabels" Width=1000px Height=500px ChartOptions="LettersInWordsBarChartOptions"></MudChart>
    </MudPaper><br>
}


@*words in sentences can either be a bar chart for loooong texts, or a line graph for shorter texts*@
@*THIS DOESN'T SEEM TO PRODUCE CORRECT RESULTS?*@
@if (BarOrLineCharts)
{

}
else
{
    <MudPaper Width=1000px Height=650px Class="doc-section-component-container">
        <br><br>
        <MudText Typo="Typo.h4" Align="Align.Center">Words In Sentences</MudText>
        <MudText Typo="Typo.subtitle2" Align="Align.Center">X = Sentence Length in Words, Y = Frequency</MudText>
        <MudChart ChartType="ChartType.Bar" ChartSeries="@WordsInSentencesSeries" @bind-SelectedIndex="WordsInSentencesIndex" XAxisLabels="@WordsInSentencesXAxisLabels" Width=1000px Height=500px ChartOptions="WordsInSentencesChartOptions"></MudChart>
    </MudPaper><br>
}


@*DEFINITELY have a toggle for this between line chart and bar chart*@
@*THIS DOESN'T SEEM TO PRODUCE CORRECT RESULTS?*@
@if (BarOrLineCharts)
{

}
else
{
    <MudPaper Width=1000px Height=650px Class="doc-section-component-container">
        <br><br>
        <MudText Typo="Typo.h4" Align="Align.Center">Sentences In Paragraphs</MudText>
        <MudText Typo="Typo.subtitle2" Align="Align.Center">X = Paragraph Length in Sentences, Y = Frequency</MudText>
        <MudChart ChartType="ChartType.Bar" ChartSeries="@SentencesInParagraphsSeries" @bind-SelectedIndex="SentencesInParagraphsIndex" XAxisLabels="@SentencesInParagraphsXAxisLabels" Width=1000px Height=500px ChartOptions="SentencesInParagraphsChartOptions"></MudChart>
    </MudPaper><br>
}


@*
On a carousel:
1) basic stats (word count, sentence count, paragraph count, top 5 most common words (excluding a/the/etcetc) - offer a drop down list of all words, estimated reading time)
2) line chart of words per sentence, plus average
3) bar chart of frequency of words with n letters (1,2,3...10+), plus average word length
4) bar chart of paragraph length in sentences, plus average
5) WHAT ELSE WOULD BE USEFUL FOR STUDENTS/ESSAY WRITERS/ETC

maybe have some functions such as *replace all instances of this word with that word* 
*@
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br />


@code {
    public string Text {get;set;} = "";
    public MatchCollection? Words {get;set;}
    public MatchCollection? Sentences {get;set;}
    public MatchCollection? Paragraphs {get;set;}
    public bool Disabled {get;set;} = false;
    public int WordCount {get;set;} = 0;
    public int SentenceCount {get;set;} = 0;
    public int ParagraphCount {get;set;} = 0;
    public bool BarOrLineCharts {get;set;} = false;
    
    //PUT THE BELOW IN SEPARATE COMPONENTS FOR EACH GRAPH?
    public int LettersInWordsIndex {get;set;} = -1;
    public int WordsInSentencesIndex {get;set;} = -1;
    public int SentencesInParagraphsIndex {get;set;} = -1;
    public List<ChartSeries> LettersInWordsBarSeries {get;set;} = new List<ChartSeries>() 
    {
        new ChartSeries() { Name = "User Text", Data = new double[10] }
    };
    public List<ChartSeries> LettersInWordsLineSeries {get;set;} = new List<ChartSeries>();
    public List<ChartSeries> WordsInSentencesSeries {get;set;} = new List<ChartSeries>() 
    {
        new ChartSeries() { Name = "User Text", Data = new double[17] }
    };
    public List<ChartSeries> SentencesInParagraphsSeries {get;set;} = new List<ChartSeries>() 
    {
        new ChartSeries() { Name = "User Text", Data = new double[10] }
    };
    public string[] LettersInWordsBarXAxisLabels {get;set;} = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10+" };
    public string[] LettersInWordsLineXAxisLabels {get;set;} = [];
    public string[] WordsInSentencesXAxisLabels {get;set;} = { "1-4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20+" }; //INSTEAD HAVE DYNAMIC LABELS DEPENDING ON OCCURENCES?
    public string[] SentencesInParagraphsXAxisLabels {get;set;} = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10+" };
    public ChartOptions LettersInWordsBarChartOptions {get;set;} = new ChartOptions() {YAxisTicks = 1};
    public ChartOptions LettersInWordsLineChartOptions {get;set;} = new ChartOptions() {YAxisTicks = 1};
    public ChartOptions WordsInSentencesChartOptions {get;set;} = new ChartOptions() {YAxisTicks = 2};
    public ChartOptions SentencesInParagraphsChartOptions {get;set;} = new ChartOptions() {YAxisTicks = 1};
    private void UpdateText(string inputString)
    {
        if (inputString == null)
            return;
        Words = Regex.Matches(inputString, @"\w+");
        WordCount = Words.Count;
        Sentences = Regex.Matches(inputString + " ", @"[^\.!?]*[\.!?]+\s"); //this doesn't work when a number/source is appended to the punctuation mark e.g. from a thesis
        SentenceCount = Sentences.Count;
        Paragraphs = Regex.Matches(inputString + "\n", @".*\n"); //THIS IS CURRENTLY ALSO USING EMPTY LINES - FIX THIS
        ParagraphCount = Paragraphs.Count;

        LettersInWordsBarSeries = new List<ChartSeries>()
        {
            UpdateLettersInWordsBarChart()
        };
        LettersInWordsLineSeries = UpdateLettersInWordsLineChart(); //NEEDS TO RETURN MULTIPLE SERIES
    
        WordsInSentencesSeries = new List<ChartSeries>()
        {
            UpdateWordsInSentencesChart()
        };

        SentencesInParagraphsSeries = new List<ChartSeries>()
        {
            UpdateSentencesInParagraphsChart()
        };
    }
    //possible to refactor the below - make smaller chunks of these methods that are the same their own methods
    private ChartSeries UpdateLettersInWordsBarChart()
    {
        if (Words == null)
            return new ChartSeries();

        double[] LettersInWordsData = new double[10];
        for (int i = 0; i<10 ; i++)
        {
            int count = 0;
            foreach (Match word in Words)
            {
                if (i < 9 && word.Length == i + 1)
                    count++;
                else if (i == 9 && word.Length >= i + 1)
                    count++;
            }  
            LettersInWordsData[i] = count;
        }

        AutoAdjustChartYAxisTicks(LettersInWordsData, LettersInWordsBarChartOptions);
        ChartSeries LettersInWordsSeries = new ChartSeries() { Name = "User Text", Data = LettersInWordsData };
        return LettersInWordsSeries;
    }
    private List<ChartSeries> UpdateLettersInWordsLineChart()
    {
        if (Words == null || Words.Count == 0)
            return new List<ChartSeries>();

        List<ChartSeries> LettersInWordsSeries = new List<ChartSeries>();
        if (Sentences == null || Sentences.Count == 0)
        {
            double[] LettersInWordsData = new double[Words.Count];
            for (int i = 0; i < Words.Count; i++)
            {
                LettersInWordsData[i] = Words[i].Length;
            }
            LettersInWordsSeries.Add(new ChartSeries() { Name = "Sentence 1", Data = LettersInWordsData });
            LettersInWordsLineXAxisLabels = AutoAdjustLineChartXAxisTicks(Words.Count);
            return LettersInWordsSeries;
        }

        List<Double> AllWords = new List<Double>();
        int largestSentence = 0;
        for (int i = 0; i < Sentences.Count; i++)
        {
            MatchCollection SentenceWords = Regex.Matches(Sentences[i].ToString(), @"\w+");
            double[] LettersInWordsData = new double[SentenceWords.Count];
            for (int j = 0; j < SentenceWords.Count; j++)
            {
                LettersInWordsData[j] = SentenceWords[j].Length;
                AllWords.Add(SentenceWords[j].Length);
            }
            LettersInWordsSeries.Add(new ChartSeries() { Name = $"Sentence {i + 1}", Data = LettersInWordsData });

            if (LettersInWordsSeries[i].Data.Length > largestSentence)
            {
                largestSentence = LettersInWordsSeries[i].Data.Length;
                LettersInWordsLineXAxisLabels = AutoAdjustLineChartXAxisTicks(SentenceWords.Count);
            }
                
        }

        if (AllWords.Count > 0)
            AutoAdjustChartYAxisTicks(AllWords.ToArray(), LettersInWordsLineChartOptions);
        return LettersInWordsSeries;
    }
    private ChartSeries UpdateWordsInSentencesChart()
    {
        double[] WordsInSentencesData = new double[17];
        if (Sentences == null)
            return new ChartSeries();
        
        for (int i = 3; i<20 ; i++)
        {
            int count = 0;
            foreach (Match sentence in Sentences)
            {
                MatchCollection SentenceWords = Regex.Matches(sentence.ToString(), @"\w+");
                if (i == 3 && SentenceWords.Count <= i + 1)
                    count++;
                else if (i < 20 && SentenceWords.Count == i + 1)
                    count++;
                else if (i == 20 && SentenceWords.Count >= i + 1)
                    count++;
            } 
            WordsInSentencesData[i - 3] = count;
        }

        AutoAdjustChartYAxisTicks(WordsInSentencesData, WordsInSentencesChartOptions);
        ChartSeries WordsInSentencesSeries = new ChartSeries() { Name = "User Text", Data = WordsInSentencesData };
        return WordsInSentencesSeries;
    }
    private ChartSeries UpdateSentencesInParagraphsChart()
    {
        double[] SentencesInParagraphsData = new double[10];
        if (Paragraphs == null)
            return new ChartSeries();
        
        for (int i = 0; i<10 ; i++)
        {
            int count = 0;
            foreach (Match paragraph in Paragraphs)
            {
                MatchCollection ParagraphSentences = Regex.Matches(paragraph.ToString(), @"\w+");
                if (i < 9 && ParagraphSentences.Count == i + 1)
                    count++;
                else if (i == 9 && ParagraphSentences.Count >= i + 1)
                    count++;
            }  
            SentencesInParagraphsData[i] = count;
        }

        AutoAdjustChartYAxisTicks(SentencesInParagraphsData, SentencesInParagraphsChartOptions);
        ChartSeries SentencesInParagraphsSeries = new ChartSeries() { Name = "User Text", Data = SentencesInParagraphsData };
        return SentencesInParagraphsSeries;
    }
    private void AutoAdjustChartYAxisTicks(double[] data, ChartOptions chartOptions)
    {
        if (data == null)
            return;
        switch (data.Max())
        {
            case < 10:
                chartOptions.YAxisTicks = 2;
                break;
            case < 25:
                chartOptions.YAxisTicks = 5;
                break;
            case < 50:
                chartOptions.YAxisTicks = 10;
                break;
            case < 150:
                chartOptions.YAxisTicks = 20;
                break;
            case >= 150:
                chartOptions.YAxisTicks = 50;
                break;
            //mudchart does ad inf on its own?
        }
    }
    private string[] AutoAdjustLineChartXAxisTicks(int count)
    {
        string[] labels = new string[count];
        if (count == 0)
            return labels;
        for (int i = 0; i < count; i++)
        {
            labels[i] = $"{i + 1}";
        }
        return labels;
    }
    private string SwitchChartText()
    {
        if (BarOrLineCharts)
            return "Line Charts";
        else
            return "Bar Charts";
    }
}